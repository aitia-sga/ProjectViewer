{
	"name": "projectviewer",
	"displayName": "Project Viewer",
	"description": "A basic example of a file explorer-like tree view.",
	"publisher": "AitiaInternationalZrt",
	"icon": "resources/icon.png",
	"version": "1.1.0",
	"engines": {
		"vscode": "^1.42.0"
	},
	"categories": [
		"Other"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/aitia-sga/ProjectViewer"
	},
	"activationEvents": ["onStartupFinished"],
	"main": "./out/extension.js",
	"contributes": {
		"viewsContainers": {
			"activitybar": [
				{
					"id": "projectViewer",
					"title": "Project Viewer",
					"icon": "$(folder)"
				}
			]
		},
		"views": {
			"projectViewer": [
				{
					"id": "activeProjectsView",
					"name": "Active projects"
				},
				{
					"id": "projectsView",
					"name": "Projects"
				},
				{
					"id": "templateProjectsView",
					"name": "Build targets"
				}
			]
		},
		"menus": {
			"view/item/context": [
				{
					"command": "projectViewer.addProjectToActive",
					"when": "view == projectsView && viewItem == project",
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.createNewFolder",
					"when": "view == activeProjectsView && (viewItem == project || viewItem == logicalDirectory)",                	
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.deleteProject",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.deleteOriginProject",
					"when": "view == projectsView",
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.exportProject",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.deleteFolderWithFiles",
					"when": "view == activeProjectsView && viewItem == logicalDirectory",                	
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.rename",
					"when": "view == activeProjectsView && (viewItem == project || viewItem == logicalDirectory)"
				},
				{
					"command": "projectViewer.renameOriginProject",
					"when": "view == projectsView"
				},
				{
					"command": "projectViewer.modifyDescription",
					"when": "view == activeProjectsView && (viewItem == project || viewItem == logicalDirectory || viewItem == file || viewItem == physicalDirectory)"
				},
				{
					"command": "projectViewer.removeFromProject",
					"when": "view == activeProjectsView && (viewItem == file || viewItem == physicalDirectory)",                	
					"group": "0_project@name"
				},
				{
					"command": "projectViewer.newProjectFromTemplate",
					"when": "view == templateProjectsView"
				},
				{
					"command": "projectViewer.buildAppDebug",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.buildAppRelease",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.buildCleanAppDebug",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.buildCleanAppRelease",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.debug",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.showLog",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.runOtherScript",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.runOtherScriptInNewTerminal",
					"when": "view == activeProjectsView && viewItem == project",
					"group": "inline"
				},
				{
					"command": "projectViewer.modifyDebugConf",
					"when": "view == activeProjectsView && viewItem == project"
				},
				{
					"command": "projectViewer.modifyOtherScript",
					"when": "view == activeProjectsView && viewItem == project"
				},
				{
					"command": "projectViewer.modifyLogCmd",
					"when": "view == activeProjectsView && viewItem == project"
				},
				{
					"command": "projectViewer.saveProject",
					"when": "view == activeProjectsView && viewItem == project"
				},
				{
					"command": "projectViewer.saveAsProject",
					"when": "view == activeProjectsView && viewItem == project"
				},
				{
					"command": "projectViewer.reloadTemplate",
					"when": "view == activeProjectsView && viewItem == project"
				}
			],
			"view/title": [
				{
					"command": "projectViewer.newProject",
					"group": "navigation",
					"when": "view == activeProjectsView"
				},
				{
					"command": "projectViewer.importProject",
					"group": "navigation",
					"when": "view == activeProjectsView"
				},
				{
					"command": "projectViewer.refreshTemplateList",
					"group": "navigation",
					"when": "view == templateProjectsView"
				}
			],
			"explorer/context": [
				{
					"command": "projectViewer.addToProject",
					"group": "1_modification"
				}
			]
		},
		"commands": [
			{
				"command": "projectViewer.addProjectToActive",
				"title": "Add to active projects"
			},
			{
				"command": "projectViewer.createNewFolder",
				"title": "Create new logical directory"
			},
			{
				"command": "projectViewer.deleteFolderWithFiles",
				"title": "Delete folder and files "
			},
			{
				"command": "projectViewer.rename",
				"title": "Rename"
			},
			{
				"command": "projectViewer.renameOriginProject",
				"title": "Rename"
			},
			{
				"command": "projectViewer.modifyDescription",
				"title": "Modify description"
			},
			{
				"command": "projectViewer.newProject",
				"title": "New project",
				"icon": "$(plus)"
			},
			{
				"command": "projectViewer.importProject",
				"title": "Import project",
				"icon": "$(arrow-down)"
			},
			{
				"command": "projectViewer.deleteProject",
				"title": "Delete project with contents"
			},
			{
				"command": "projectViewer.deleteOriginProject",
				"title": "Delete project with contents"
			},
			{
				"command": "projectViewer.exportProject",
				"title": "Export project"
			},
			{
				"command": "projectViewer.addToProject",
				"title": "Add to project"
			},
			{
				"command": "projectViewer.removeFromProject",
				"title": "Remove from project"
			},
			{
				"command": "projectViewer.newProjectFromTemplate",
				"title": "Create new project from build target"
			},
			{
				"command": "projectViewer.buildAppDebug",
				"title": "Build app in debug mode",
				"icon": "resources/B_debug.svg"
			},
			{
				"command": "projectViewer.buildAppRelease",
				"title": "Build app in release mode",
				"icon": "resources/B_release.svg"
			},
			{
				"command": "projectViewer.buildCleanAppDebug",
				"title": "Build app in debug mode",
				"icon": "resources/BC_debug.svg"
			},
			{
				"command": "projectViewer.buildCleanAppRelease",
				"title": "Build app in release mode",
				"icon": "resources/BC_release.svg"
			},
			{
				"command": "projectViewer.debug",
				"title": "Start debugging",
				"icon": "resources/D.svg"
			},
			{
				"command": "projectViewer.showLog",
				"title": "Show syslog",
				"icon": "resources/LG.svg"
			},
			{
				"command": "projectViewer.runOtherScript",
				"title": "Run other script",
				"icon": "resources/O.svg"
			},
			{
				"command": "projectViewer.runOtherScriptInNewTerminal",
				"title": "Run other script in new terminal",
				"icon": "resources/ON.svg"
			},
			{
				"command": "projectViewer.modifyDebugConf",
				"title": "Modify debug configuration"
			},
			{
				"command": "projectViewer.modifyOtherScript",
				"title": "Modify other script"
			},
			{
				"command": "projectViewer.modifyLogCmd",
				"title": "Modify log command"
			},
			{
				"command": "projectViewer.saveProject",
				"title": "Save project"
			},
			{
				"command": "projectViewer.saveAsProject",
				"title": "Save as project"
			},
			{
				"command": "projectViewer.reloadTemplate",
				"title": "Reload saved project"
			},
			{
				"command": "projectViewer.refreshTemplateList",
				"title": "Refresh template list",
				"icon": "$(refresh)"
			},
			{
				"command": "projectViewer.needMotivation",
				"title": "Need motivation"
			}
			
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^8.1.0",
		"@types/mocha": "^10.0.1",
		"@types/node": "16.x",
		"@types/vscode": "^1.42.0",
		"@typescript-eslint/eslint-plugin": "^6.4.1",
		"@typescript-eslint/parser": "^6.4.1",
		"@vscode/test-electron": "^2.3.4",
		"eslint": "^8.47.0",
		"glob": "^10.3.7",
		"mocha": "^10.2.0",
		"typescript": "^5.1.6"
	}
}
